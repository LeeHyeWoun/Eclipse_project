/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.39
 * Generated at: 2019-06-10 18:48:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.www.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import www.MemberBean;
import java.util.*;

public final class memberListDelete_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("www.MemberBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("EUC-KR");

      out.write('\r');
      out.write('\n');
      www.MemberMgr mMgr = null;
      mMgr = (www.MemberMgr) _jspx_page_context.getAttribute("mMgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (mMgr == null){
        mMgr = new www.MemberMgr();
        _jspx_page_context.setAttribute("mMgr", mMgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');

	String id = (String) session.getAttribute("idKey");
	MemberBean mBean = mMgr.getMember(id);
	
	int totalRecord=0;		//전체 레코드의 수
	int numPerPage=10;		//페이지당 레코드의 수
	int pagePerBlock=15;	//블럭당 페이지의 수
	
	int totalPage=0;		//전체 페이지 수
	int totalBlock=0;		//전체블럭 수
	
	int nowPage=1;			//현재 페이지
	int nowBlock=1;			//현재 블럭
	
	int start=0; 			//디비의 select 시작번호
	int end=10; 			//시작번호로 부터 가져올 select 갯수

	int listSize=0;			//현재 읽어온 회원의 수
	
	String keyWord = "", keyField = "";
	Vector<MemberBean> vlist = null;
	if (request.getParameter("keyWord") != null) {
		keyWord = request.getParameter("keyWord");
		keyField = request.getParameter("keyField");
	}
	if (request.getParameter("reload") != null){
		if(request.getParameter("reload").equals("true")) {
			keyWord = "";
			keyField = "";
		}
	}

	if (request.getParameter("nowPage") != null) {
		nowPage = Integer.parseInt(request.getParameter("nowPage"));
	}
	 start=(nowPage * numPerPage)-numPerPage;
	 end= start+numPerPage;
	 
	totalRecord = mMgr.getTotalCount(keyField, keyWord);
	totalPage =(int)Math.ceil((double)totalRecord / numPerPage);  //전체페이지수
	nowBlock= (int)Math.ceil((double)nowPage/pagePerBlock); //현재블럭 계산
	  
	totalBlock =(int)Math.ceil((double)totalPage / pagePerBlock);  //전체블럭계산


      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>회원목록보기</title>\r\n");
      out.write("<link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction back() {\r\n");
      out.write("\t\thistory.back();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction pageing(page) {\r\n");
      out.write("\t\tdocument.readFrm.nowPage.value = page;\r\n");
      out.write("\t\tdocument.readFrm.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction block(value){\r\n");
      out.write("\t\t document.readFrm.nowPage.value=");
      out.print(pagePerBlock);
      out.write("*(value-1)+1;\r\n");
      out.write("\t\t document.readFrm.submit();\r\n");
      out.write("\t} \r\n");
      out.write("\t\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body bgcolor=\"#f9f1e5\" onLoad=\"regFrm.id.focus()\">\r\n");
      out.write("\t<div align=\"center\">\r\n");
      out.write("\t\t<br /><br />\r\n");
      out.write("\t<table align=\"center\" border=\"0\" width=\"90%\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td align=\"center\"><font color=red><b><h2>회원 삭제</h2></b></font></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>Total : ");
      out.print(totalRecord);
      out.write("Articles(<font color=\"red\">\r\n");
      out.write("\t\t\t");
      out.print(nowPage);
      out.write('/');
      out.print(totalPage);
      out.write("Pages</font>)</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<form name=\"dForm\" method=\"post\" action=\"delete.jsp\">\r\n");
      out.write("\t<table align=\"center\" border=\"0\" width=\"90%\" cellspacing=\"0\" cellpadding=\"3\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td align=\"center\" colspan=\"2\">\r\n");
      out.write("\t\t\t\t");

					  vlist = mMgr.getMemberList(keyField, keyWord, start, end);
					  listSize = vlist.size();//브라우저 화면에 보여질 게시물갯수
					  if (vlist.isEmpty()) {
						out.println("등록된 게시물이 없습니다.");
					  } else {
				
      out.write("\r\n");
      out.write("\t\t\t\t<table border=\"1\" width=\"1200\" cellspacing=\"0\" cellpadding=\"2\" align=\"center\">\r\n");
      out.write("\t\t\t\t\t<tr align=\"center\" bgcolor=\"#996600\">\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">선택</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">아이디</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">패스워드</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">이름</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">성별</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">생년월일</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">이메일</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">우편번호</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">주소</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">취미</td>\r\n");
      out.write("\t\t\t\t\t\t<td align=\"center\">직업</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t");

						for (int i=0; i<numPerPage; i++){
							if(i==listSize) break;
							MemberBean mB = vlist.get(i);
							String mId = mB.getId();
							String mPw = mB.getPwd();
							String mName = mB.getName();
							String mGender = mB.getGender();
							String mBirthday = mB.getBirthday();
							String mEmail = mB.getEmail();
							String mZipcode = mB.getZipcode();
							String mAddress = mB.getAddress();
							String[] mHobby = mB.getHobby();
							String mJob = mB.getJob();
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"3%\" align=\"center\" >\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"delete\" value=\"");
      out.print(mId);
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"6%\">");
      out.print(mId);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"6%\">");
      out.print(mPw);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"6%\">");
      out.print(mName);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"3%\" align=\"center\">");
      out.print(mGender);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"6%\">");
      out.print(mBirthday);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"12%\">");
      out.print(mEmail);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"6%\">");
      out.print(mZipcode);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"*\">");
      out.print(mAddress);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"18%\">\r\n");
      out.write("\t\t\t\t\t\t");

							String list[] = { "인터넷", "여행", "게임", "영화", "운동" };
							boolean more = false;
							for (int j = 0; j < list.length; j++) {
								if (mHobby[j].equals("1")){
									if (more == true){
										out.println(", ");
									}
									out.println( list[j]);
									if (more == false){
										more = true;
									}
								}
							}
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t<td width=\"12%\">");
      out.print(mJob);
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t");
} //for
      out.write("\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t");
} //if
      out.write("\r\n");
      out.write("  \t\t\t</td>\r\n");
      out.write(" \t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"2\"><br /><br /></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t<!-- 페이징 및 블럭 처리 Start--> \r\n");
      out.write("\t\t\t");

   				  int pageStart = (nowBlock -1)*pagePerBlock + 1 ; //하단 페이지 시작번호
   				  int pageEnd = ((pageStart + pagePerBlock ) < totalPage) ?  (pageStart + pagePerBlock): totalPage+1; 
   				  //하단 페이지 끝번호
   				  if(totalPage !=0){
    			  	if (nowBlock > 1) {
      out.write("\r\n");
      out.write("    \t\t\t  \t\t<a href=\"javascript:block('");
      out.print(nowBlock-1);
      out.write("')\">prev...</a>");
}
      out.write("&nbsp; \r\n");
      out.write("    \t\t\t  \t\t");
for ( ; pageStart < pageEnd; pageStart++){
      out.write("\r\n");
      out.write("     \t\t\t     \t<a href=\"javascript:pageing('");
      out.print(pageStart );
      out.write("')\"> \r\n");
      out.write("     \t\t\t\t\t");
if(pageStart==nowPage) {
      out.write("<font color=\"blue\"> ");
}
      out.write("\r\n");
      out.write("     \t\t\t\t\t[");
      out.print(pageStart );
      out.write("] \r\n");
      out.write("     \t\t\t\t\t");
if(pageStart==nowPage) {
      out.write("</font> ");
}
      out.write("</a> \r\n");
      out.write("    \t\t\t\t\t");
}//for
      out.write("&nbsp; \r\n");
      out.write("    \t\t\t\t\t");
if (totalBlock > nowBlock ) {
      out.write("\r\n");
      out.write("    \t\t\t\t\t<a href=\"javascript:block('");
      out.print(nowBlock+1);
      out.write("')\">.....next</a>\r\n");
      out.write("    \t\t\t\t");
}
      out.write("&nbsp;  \r\n");
      out.write("   \t\t\t\t");
}
      out.write("\r\n");
      out.write(" \t\t\t\t<!-- 페이징 및 블럭 처리 End-->\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td align=\"right\">\r\n");
      out.write("\t\t\t\t<a href=\"javascript:back()\">[회원목록]</a>\r\n");
      out.write("\t\t\t\t&nbsp\r\n");
      out.write("\t\t\t\t<input type=\"submit\" value=\"[삭제]\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
